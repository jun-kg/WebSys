generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model alert_rules {
  id                   Int       @id @default(autoincrement())
  name                 String    
  description          String?
  category             String?   
  source               String?   
  messagePattern       String?
  thresholdCount       Int       @default(1)
  thresholdPeriod      Int       @default(300)
  notificationChannels String
  isEnabled            Boolean   @default(true)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime
  level                LogLevel?
}

model audit_logs {
  id             Int       @id @default(autoincrement())
  userId         Int
  action         String    
  targetType     String    
  targetId       Int
  featureId      Int?
  oldPermissions Json?
  newPermissions Json?
  reason         String?
  ipAddress      String?   
  userAgent      String?
  createdAt      DateTime  @default(now())
  features       features? @relation(fields: [featureId], references: [id])
  users          users     @relation(fields: [userId], references: [id])

  @@index([action])
  @@index([createdAt(sort: Desc)])
  @@index([featureId])
  @@index([targetType, targetId])
  @@index([userId])
}

model companies {
  id                   Int                    @id @default(autoincrement())
  code                 String                 @unique 
  name                 String                 
  nameKana             String?                
  industry             String?                
  establishedDate      DateTime?              
  employeeCount        Int?
  address              String?
  phone                String?                
  email                String?                
  contractPlan         String                 @default("STANDARD") 
  maxUsers             Int                    @default(100)
  isActive             Boolean                @default(true)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime
  createdBy            Int?
  updatedBy            Int?
  departments          departments[]
  permission_templates permission_templates[]
  users                users[]

  @@index([code])
  @@index([isActive])
}

model department_feature_permissions {
  id                                                    Int         @id @default(autoincrement())
  departmentId                                          Int
  featureId                                             Int
  canView                                               Boolean     @default(false)
  canCreate                                             Boolean     @default(false)
  canEdit                                               Boolean     @default(false)
  canDelete                                             Boolean     @default(false)
  canApprove                                            Boolean     @default(false)
  canExport                                             Boolean     @default(false)
  inheritFromParent                                     Boolean     @default(true)
  createdAt                                             DateTime    @default(now())
  updatedAt                                             DateTime
  createdBy                                             Int?
  updatedBy                                             Int?
  users_department_feature_permissions_createdByTousers users?      @relation("department_feature_permissions_createdByTousers", fields: [createdBy], references: [id])
  departments                                           departments @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  features                                              features    @relation(fields: [featureId], references: [id], onDelete: Cascade)
  users_department_feature_permissions_updatedByTousers users?      @relation("department_feature_permissions_updatedByTousers", fields: [updatedBy], references: [id])

  @@unique([departmentId, featureId])
  @@index([departmentId])
  @@index([featureId])
}

model departments {
  id                             Int                              @id @default(autoincrement())
  companyId                      Int
  code                           String                           
  name                           String                           
  nameKana                       String?                          
  parentId                       Int?
  level                          Int                              @default(1)
  path                           String?
  displayOrder                   Int                              @default(0)
  isActive                       Boolean                          @default(true)
  createdAt                      DateTime                         @default(now())
  updatedAt                      DateTime
  createdBy                      Int?
  updatedBy                      Int?
  department_feature_permissions department_feature_permissions[]
  permission_inheritance_rules   permission_inheritance_rules[]
  companies                      companies                        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  departments                    departments?                     @relation("departmentsTodepartments", fields: [parentId], references: [id])
  other_departments              departments[]                    @relation("departmentsTodepartments")
  user_departments               user_departments[]
  users                          users[]

  @@unique([companyId, code])
  @@index([companyId])
  @@index([isActive])
  @@index([parentId])
  @@index([path])
}

model features {
  id                             Int                              @id @default(autoincrement())
  code                           String                           @unique 
  name                           String                           
  description                    String?
  category                       String                           
  parentId                       Int?
  path                           String?
  urlPattern                     String?                          
  apiPattern                     String?                          
  icon                           String?                          
  displayOrder                   Int                              @default(0)
  isMenuItem                     Boolean                          @default(true)
  isActive                       Boolean                          @default(true)
  createdAt                      DateTime                         @default(now())
  updatedAt                      DateTime
  audit_logs                     audit_logs[]
  department_feature_permissions department_feature_permissions[]
  permission_inheritance_rules   permission_inheritance_rules[]
  features                       features?                        @relation("featuresTofeatures", fields: [parentId], references: [id])
  other_features                 features[]                       @relation("featuresTofeatures")
  permission_template_details    permission_template_details[]
  permission_template_features   permission_template_features[]

  @@index([category])
  @@index([code])
  @@index([isActive])
  @@index([parentId])
}

model log_categories {
  id          Int      @id @default(autoincrement())
  code        String   @unique 
  name        String   
  description String?
  color       String   @default("#666666") 
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  logs        logs[]

  @@index([code])
}

model log_statistics {
  id       Int      @id @default(autoincrement())
  date     DateTime 
  hour     Int?     
  category String   
  source   String   
  count    Int      @default(0)
  level    LogLevel

  @@unique([date, hour, level, category, source])
  @@index([date(sort: Desc)])
}

model logs {
  id             BigInt          @id @default(autoincrement())
  timestamp      DateTime        @default(now())
  message        String
  userId         Int?
  source         String          
  environment    String          @default("development") 
  createdAt      DateTime        @default(now())
  categoryId     Int?
  context        Json?
  level          LogLevel
  log_categories log_categories? @relation(fields: [categoryId], references: [id])
  users          users?          @relation(fields: [userId], references: [id])

  @@index([categoryId])
  @@index([environment])
  @@index([level])
  @@index([source])
  @@index([timestamp(sort: Desc)])
  @@index([userId])
}

model message_definitions {
  id              Int               @id @default(autoincrement())
  code            String            @unique 
  category        String            
  type            MessageType
  messageJa       String
  messageEn       String?
  description     String?
  isActive        Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  system_messages system_messages[]

  @@index([category])
  @@index([code])
  @@index([type])
}

model permission_template_details {
  id                   Int                  @id @default(autoincrement())
  templateId           Int
  featureId            Int
  canView              Boolean              @default(false)
  canCreate            Boolean              @default(false)
  canEdit              Boolean              @default(false)
  canDelete            Boolean              @default(false)
  canApprove           Boolean              @default(false)
  canExport            Boolean              @default(false)
  features             features             @relation(fields: [featureId], references: [id])
  permission_templates permission_templates @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@unique([templateId, featureId])
}

model permission_template_features {
  id                   Int                  @id @default(autoincrement())
  templateId           Int
  featureId            Int
  canView              Boolean              @default(false)
  canCreate            Boolean              @default(false)
  canEdit              Boolean              @default(false)
  canDelete            Boolean              @default(false)
  canApprove           Boolean              @default(false)
  canExport            Boolean              @default(false)
  features             features             @relation(fields: [featureId], references: [id])
  permission_templates permission_templates @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@unique([templateId, featureId])
}

model permission_templates {
  id                                          Int                            @id @default(autoincrement())
  name                                        String                         
  description                                 String?
  departmentType                              String?                        
  companyId                                   Int?
  isSystemTemplate                            Boolean                        @default(false)
  category                                    String                         @default("CUSTOM") 
  isPreset                                    Boolean                        @default(false)
  isActive                                    Boolean                        @default(true)
  displayOrder                                Int                            @default(0)
  createdAt                                   DateTime                       @default(now())
  updatedAt                                   DateTime
  createdBy                                   Int?
  updatedBy                                   Int?
  permission_template_details                 permission_template_details[]
  permission_template_features                permission_template_features[]
  companies                                   companies?                     @relation(fields: [companyId], references: [id])
  users_permission_templates_createdByTousers users?                         @relation("permission_templates_createdByTousers", fields: [createdBy], references: [id])
  users_permission_templates_updatedByTousers users?                         @relation("permission_templates_updatedByTousers", fields: [updatedBy], references: [id])
}

model system_messages {
  id                  Int                 @id @default(autoincrement())
  definitionId        Int
  userId              Int?
  customMessage       String?
  context             Json?
  isRead              Boolean             @default(false)
  createdAt           DateTime            @default(now())
  readAt              DateTime?
  message_definitions message_definitions @relation(fields: [definitionId], references: [id])
  users               users?              @relation(fields: [userId], references: [id])

  @@index([createdAt(sort: Desc)])
  @@index([definitionId])
  @@index([isRead])
  @@index([userId])
}

model user_departments {
  id           Int         @id @default(autoincrement())
  userId       Int
  departmentId Int
  isPrimary    Boolean     @default(false)
  role         String      @default("MEMBER") 
  assignedDate DateTime    @default(now()) 
  expiredDate  DateTime?   
  createdAt    DateTime    @default(now())
  updatedAt    DateTime
  departments  departments @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  users        users       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, departmentId])
  @@index([departmentId])
  @@index([isPrimary])
  @@index([userId])
}

model user_sessions {
  id           Int      @id @default(autoincrement())
  userId       Int
  sessionToken String   @unique
  ipAddress    String?  
  userAgent    String?
  expiresAt    DateTime
  lastActivity DateTime @default(now())
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  users        users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([expiresAt])
  @@index([isActive])
  @@index([sessionToken])
  @@index([userId])
}

model users {
  id                                                                             Int                              @id @default(autoincrement())
  username                                                                       String                           @unique
  email                                                                          String                           @unique
  password                                                                       String
  name                                                                           String
  companyId                                                                      Int?
  primaryDepartmentId                                                            Int?
  employeeCode                                                                   String?                          
  joinDate                                                                       DateTime?                        
  leaveDate                                                                      DateTime?                        
  role                                                                           UserRole                         @default(USER)
  isActive                                                                       Boolean                          @default(true)
  lastLoginAt                                                                    DateTime?
  createdAt                                                                      DateTime                         @default(now())
  updatedAt                                                                      DateTime
  audit_logs                                                                     audit_logs[]
  department_feature_permissions_department_feature_permissions_createdByTousers department_feature_permissions[] @relation("department_feature_permissions_createdByTousers")
  department_feature_permissions_department_feature_permissions_updatedByTousers department_feature_permissions[] @relation("department_feature_permissions_updatedByTousers")
  logs                                                                           logs[]
  permission_templates_permission_templates_createdByTousers                     permission_templates[]           @relation("permission_templates_createdByTousers")
  permission_templates_permission_templates_updatedByTousers                     permission_templates[]           @relation("permission_templates_updatedByTousers")
  system_messages                                                                system_messages[]
  user_departments                                                               user_departments[]
  user_sessions                                                                  user_sessions[]
  companies                                                                      companies?                       @relation(fields: [companyId], references: [id])
  departments                                                                    departments?                     @relation(fields: [primaryDepartmentId], references: [id])

  @@index([companyId])
  @@index([employeeCode])
  @@index([isActive])
  @@index([primaryDepartmentId])
  @@index([role])
}

enum LogLevel {
  TRACE
  DEBUG
  INFO
  WARN
  ERROR
  FATAL
}

enum MessageType {
  INFO
  SUCCESS
  WARNING
  ERROR
}

enum UserRole {
  ADMIN
  USER
  GUEST
  MANAGER
}

// 権限継承ルールテーブル
model permission_inheritance_rules {
  id              Int      @id @default(autoincrement())
  departmentId    Int
  featureId       Int
  inheritType     String    // ALL, PARTIAL, NONE
  inheritView     Boolean  @default(true)
  inheritCreate   Boolean  @default(false)
  inheritEdit     Boolean  @default(false)
  inheritDelete   Boolean  @default(false)
  inheritApprove  Boolean  @default(false)
  inheritExport   Boolean  @default(false)
  priority        Int      @default(0) // 優先度（高い値が優先）
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime
  createdBy       Int?
  updatedBy       Int?

  departments     departments @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  features        features    @relation(fields: [featureId], references: [id], onDelete: Cascade)

  @@unique([departmentId, featureId])
  @@index([departmentId])
  @@index([featureId])
  @@index([isActive])
}
