// ============================================
// Prisma Configuration
// ============================================
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// üîí CORE MODELS (ÂÖ±ÈÄö„Ç≥„Ç¢ - Â§âÊõ¥Á¶ÅÊ≠¢)
// ============================================
// „Ç∑„Çπ„ÉÜ„É†Âü∫Áõ§„Å®„Å™„Çã„É¢„Éá„É´„ÄÇÂÖ®„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅßÂÖ±Êúâ„ÄÇ
// Â§âÊõ¥„ÅØÂÖ±ÈÄö„É©„Ç§„Éñ„É©„É™Êõ¥Êñ∞„Å®„Åó„Å¶Êâ±„ÅÜ„ÄÇ

// --- Authentication & Authorization ---
// Ë™çË®º„ÉªË™çÂèØ„ÅÆÂü∫Áõ§„É¢„Éá„É´

model users {
  id                                                                             Int                              @id @default(autoincrement())
  username                                                                       String                           @unique
  email                                                                          String                           @unique
  password                                                                       String
  name                                                                           String
  companyId                                                                      Int?
  primaryDepartmentId                                                            Int?
  employeeCode                                                                   String?
  joinDate                                                                       DateTime?
  leaveDate                                                                      DateTime?
  role                                                                           UserRole                         @default(USER)
  isActive                                                                       Boolean                          @default(true)
  lastLoginAt                                                                    DateTime?
  isFirstLogin                                                                   Boolean                          @default(true)
  passwordResetToken                                                             String?
  passwordResetExpiry                                                            DateTime?
  createdAt                                                                      DateTime                         @default(now())
  updatedAt                                                                      DateTime
  audit_logs                                                                     audit_logs[]
  department_feature_permissions_department_feature_permissions_createdByTousers department_feature_permissions[] @relation("department_feature_permissions_createdByTousers")
  department_feature_permissions_department_feature_permissions_updatedByTousers department_feature_permissions[] @relation("department_feature_permissions_updatedByTousers")
  logs                                                                           logs[]
  permission_templates_permission_templates_createdByTousers                     permission_templates[]           @relation("permission_templates_createdByTousers")
  permission_templates_permission_templates_updatedByTousers                     permission_templates[]           @relation("permission_templates_updatedByTousers")
  system_messages                                                                system_messages[]
  user_departments                                                               user_departments[]
  user_sessions                                                                  user_sessions[]
  refresh_tokens                                                                 refresh_tokens[]
  security_events                                                                security_events[]
  companies                                                                      companies?                       @relation(fields: [companyId], references: [id])
  departments                                                                    departments?                     @relation(fields: [primaryDepartmentId], references: [id])

  // „ÉØ„Éº„ÇØ„Éï„É≠„ÉºÈñ¢ÈÄ£„É™„É¨„Éº„Ç∑„Éß„É≥
  workflow_types_created                                                        workflow_types[]                 @relation("workflow_types_created")
  workflow_types_updated                                                        workflow_types[]                 @relation("workflow_types_updated")
  workflow_requests_requester                                                   workflow_requests[]              @relation("workflow_requests_requester")
  workflow_requests_emergency_approver                                          workflow_requests[]              @relation("workflow_requests_emergency_approver")
  approval_history_approver                                                     approval_history[]               @relation("approval_history_approver")
  approval_history_delegated_from                                               approval_history[]               @relation("approval_history_delegated_from")
  approval_history_delegated_to                                                 approval_history[]               @relation("approval_history_delegated_to")
  approval_delegates_delegator                                                  approval_delegates[]             @relation("approval_delegates_delegator")
  approval_delegates_delegate                                                   approval_delegates[]             @relation("approval_delegates_delegate")
  approval_delegates_created                                                    approval_delegates[]             @relation("approval_delegates_created")
  workflow_notifications_user                                                   workflow_notifications[]         @relation("workflow_notifications_user")
  workflow_attachments_uploader                                                 workflow_attachments[]           @relation("workflow_attachments_uploader")
  workflow_attachments_deleter                                                  workflow_attachments[]           @relation("workflow_attachments_deleter")

  @@index([companyId])
  @@index([employeeCode])
  @@index([isActive])
  @@index([primaryDepartmentId])
  @@index([role])
}

model companies {
  id                   Int                    @id @default(autoincrement())
  code                 String                 @unique
  name                 String
  nameKana             String?
  industry             String?
  establishedDate      DateTime?
  employeeCount        Int?
  address              String?
  phone                String?
  email                String?
  contractPlan         String                 @default("STANDARD")
  maxUsers             Int                    @default(100)
  isActive             Boolean                @default(true)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime
  createdBy            Int?
  updatedBy            Int?
  departments          departments[]
  permission_templates permission_templates[]
  users                users[]
  security_settings    security_settings[]
  workflow_types       workflow_types[]
  workflow_requests    workflow_requests[]

  @@index([code])
  @@index([isActive])
}

model departments {
  id                             Int                              @id @default(autoincrement())
  companyId                      Int
  code                           String
  name                           String
  nameKana                       String?
  parentId                       Int?
  level                          Int                              @default(1)
  path                           String?
  displayOrder                   Int                              @default(0)
  isActive                       Boolean                          @default(true)
  createdAt                      DateTime                         @default(now())
  updatedAt                      DateTime
  createdBy                      Int?
  updatedBy                      Int?
  department_feature_permissions department_feature_permissions[]
  permission_inheritance_rules   permission_inheritance_rules[]
  companies                      companies                        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  departments                    departments?                     @relation("departmentsTodepartments", fields: [parentId], references: [id])
  other_departments              departments[]                    @relation("departmentsTodepartments")
  user_departments               user_departments[]
  users                          users[]
  workflow_requests              workflow_requests[]

  @@unique([companyId, code])
  @@index([companyId])
  @@index([isActive])
  @@index([parentId])
  @@index([path])
}

model user_departments {
  id           Int         @id @default(autoincrement())
  userId       Int
  departmentId Int
  isPrimary    Boolean     @default(false)
  role         String      @default("MEMBER")
  assignedDate DateTime    @default(now())
  expiredDate  DateTime?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime
  departments  departments @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  users        users       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, departmentId])
  @@index([departmentId])
  @@index([isPrimary])
  @@index([userId])
}

model user_sessions {
  id           Int      @id @default(autoincrement())
  userId       Int
  sessionToken String   @unique
  ipAddress    String?
  userAgent    String?
  expiresAt    DateTime
  lastActivity DateTime @default(now())
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  users        users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([expiresAt])
  @@index([isActive])
  @@index([sessionToken])
  @@index([userId])
}

// --- Permission Management (RBAC) ---
// Ê®©ÈôêÁÆ°ÁêÜ„ÉªRBACÊ©üËÉΩ

model features {
  id                             Int                              @id @default(autoincrement())
  code                           String                           @unique
  name                           String
  description                    String?
  category                       String
  parentId                       Int?
  path                           String?
  urlPattern                     String?
  apiPattern                     String?
  icon                           String?
  displayOrder                   Int                              @default(0)
  isMenuItem                     Boolean                          @default(true)
  isActive                       Boolean                          @default(true)
  createdAt                      DateTime                         @default(now())
  updatedAt                      DateTime
  audit_logs                     audit_logs[]
  department_feature_permissions department_feature_permissions[]
  permission_inheritance_rules   permission_inheritance_rules[]
  features                       features?                        @relation("featuresTofeatures", fields: [parentId], references: [id])
  other_features                 features[]                       @relation("featuresTofeatures")
  permission_template_details    permission_template_details[]
  permission_template_features   permission_template_features[]

  @@index([category])
  @@index([code])
  @@index([isActive])
  @@index([parentId])
}

model department_feature_permissions {
  id                                                    Int         @id @default(autoincrement())
  departmentId                                          Int
  featureId                                             Int
  canView                                               Boolean     @default(false)
  canCreate                                             Boolean     @default(false)
  canEdit                                               Boolean     @default(false)
  canDelete                                             Boolean     @default(false)
  canApprove                                            Boolean     @default(false)
  canExport                                             Boolean     @default(false)
  inheritFromParent                                     Boolean     @default(true)
  createdAt                                             DateTime    @default(now())
  updatedAt                                             DateTime
  createdBy                                             Int?
  updatedBy                                             Int?
  users_department_feature_permissions_createdByTousers users?      @relation("department_feature_permissions_createdByTousers", fields: [createdBy], references: [id])
  departments                                           departments @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  features                                              features    @relation(fields: [featureId], references: [id], onDelete: Cascade)
  users_department_feature_permissions_updatedByTousers users?      @relation("department_feature_permissions_updatedByTousers", fields: [updatedBy], references: [id])

  @@unique([departmentId, featureId])
  @@index([departmentId])
  @@index([featureId])
}

model permission_templates {
  id                                          Int                            @id @default(autoincrement())
  name                                        String
  description                                 String?
  departmentType                              String?
  companyId                                   Int?
  isSystemTemplate                            Boolean                        @default(false)
  category                                    String                         @default("CUSTOM")
  isPreset                                    Boolean                        @default(false)
  isActive                                    Boolean                        @default(true)
  displayOrder                                Int                            @default(0)
  createdAt                                   DateTime                       @default(now())
  updatedAt                                   DateTime
  createdBy                                   Int?
  updatedBy                                   Int?
  permission_template_details                 permission_template_details[]
  permission_template_features                permission_template_features[]
  companies                                   companies?                     @relation(fields: [companyId], references: [id])
  users_permission_templates_createdByTousers users?                         @relation("permission_templates_createdByTousers", fields: [createdBy], references: [id])
  users_permission_templates_updatedByTousers users?                         @relation("permission_templates_updatedByTousers", fields: [updatedBy], references: [id])
}

model permission_template_details {
  id                   Int                  @id @default(autoincrement())
  templateId           Int
  featureId            Int
  canView              Boolean              @default(false)
  canCreate            Boolean              @default(false)
  canEdit              Boolean              @default(false)
  canDelete            Boolean              @default(false)
  canApprove           Boolean              @default(false)
  canExport            Boolean              @default(false)
  features             features             @relation(fields: [featureId], references: [id])
  permission_templates permission_templates @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@unique([templateId, featureId])
}

model permission_template_features {
  id                   Int                  @id @default(autoincrement())
  templateId           Int
  featureId            Int
  canView              Boolean              @default(false)
  canCreate            Boolean              @default(false)
  canEdit              Boolean              @default(false)
  canDelete            Boolean              @default(false)
  canApprove           Boolean              @default(false)
  canExport            Boolean              @default(false)
  features             features             @relation(fields: [featureId], references: [id])
  permission_templates permission_templates @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@unique([templateId, featureId])
}

model permission_inheritance_rules {
  id              Int      @id @default(autoincrement())
  departmentId    Int
  featureId       Int
  inheritType     String    // ALL, PARTIAL, NONE
  inheritView     Boolean  @default(true)
  inheritCreate   Boolean  @default(false)
  inheritEdit     Boolean  @default(false)
  inheritDelete   Boolean  @default(false)
  inheritApprove  Boolean  @default(false)
  inheritExport   Boolean  @default(false)
  priority        Int      @default(0) // ÂÑ™ÂÖàÂ∫¶ÔºàÈ´ò„ÅÑÂÄ§„ÅåÂÑ™ÂÖàÔºâ
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime
  createdBy       Int?
  updatedBy       Int?

  departments     departments @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  features        features    @relation(fields: [featureId], references: [id], onDelete: Cascade)

  @@unique([departmentId, featureId])
  @@index([departmentId])
  @@index([featureId])
  @@index([isActive])
}

// --- Audit & Logging ---
// Áõ£Êüª„É≠„Ç∞„Éª„Ç∑„Çπ„ÉÜ„É†„É≠„Ç∞

model audit_logs {
  id             Int       @id @default(autoincrement())
  userId         Int
  action         String
  targetType     String
  targetId       Int
  featureId      Int?
  oldPermissions Json?
  newPermissions Json?
  reason         String?
  ipAddress      String?
  userAgent      String?
  createdAt      DateTime  @default(now())
  features       features? @relation(fields: [featureId], references: [id])
  users          users     @relation(fields: [userId], references: [id])

  @@index([action])
  @@index([createdAt(sort: Desc)])
  @@index([featureId])
  @@index([targetType, targetId])
  @@index([userId])
}

model logs {
  id             BigInt          @id @default(autoincrement())
  timestamp      DateTime        @default(now())
  message        String
  userId         Int?
  source         String
  environment    String          @default("development")
  createdAt      DateTime        @default(now())
  categoryId     Int?
  context        Json?
  level          LogLevel
  log_categories log_categories? @relation(fields: [categoryId], references: [id])
  users          users?          @relation(fields: [userId], references: [id])

  @@index([categoryId])
  @@index([environment])
  @@index([level])
  @@index([source])
  @@index([timestamp(sort: Desc)])
  @@index([userId])
}

model log_categories {
  id          Int      @id @default(autoincrement())
  code        String   @unique
  name        String
  description String?
  color       String   @default("#666666")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  logs        logs[]

  @@index([code])
}

model log_statistics {
  id       Int      @id @default(autoincrement())
  date     DateTime
  hour     Int?
  category String
  source   String
  count    Int      @default(0)
  level    LogLevel

  @@unique([date, hour, level, category, source])
  @@index([date(sort: Desc)])
}

model alert_rules {
  id                   Int       @id @default(autoincrement())
  name                 String
  description          String?
  category             String?
  source               String?
  messagePattern       String?
  thresholdCount       Int       @default(1)
  thresholdPeriod      Int       @default(300)
  notificationChannels String[]
  isEnabled            Boolean   @default(true)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime
  level                LogLevel?
}

// --- Messaging & Notifications ---
// „É°„ÉÉ„Çª„Éº„Ç∏„ÉªÈÄöÁü•ÁÆ°ÁêÜ

model message_definitions {
  id              Int               @id @default(autoincrement())
  code            String            @unique
  category        String
  type            MessageType
  messageJa       String
  messageEn       String?
  description     String?
  isActive        Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  system_messages system_messages[]

  @@index([category])
  @@index([code])
  @@index([type])
}

model system_messages {
  id                  Int                 @id @default(autoincrement())
  definitionId        Int
  userId              Int?
  customMessage       String?
  context             Json?
  isRead              Boolean             @default(false)
  createdAt           DateTime            @default(now())
  readAt              DateTime?
  message_definitions message_definitions @relation(fields: [definitionId], references: [id])
  users               users?              @relation(fields: [userId], references: [id])

  @@index([createdAt(sort: Desc)])
  @@index([definitionId])
  @@index([isRead])
  @@index([userId])
}

// --- Security ---
// „Çª„Ç≠„É•„É™„ÉÜ„Ç£Ê©üËÉΩ

model refresh_tokens {
  id          Int      @id @default(autoincrement())
  userId      Int
  jti         String   @unique // JWT ID
  tokenHash   String   // „Éà„Éº„ÇØ„É≥„ÅÆ„Éè„ÉÉ„Ç∑„É•
  expiresAt   DateTime
  isActive    Boolean  @default(true)
  revokedAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users       users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([jti])
  @@index([expiresAt])
  @@index([isActive])
}

model security_events {
  id          Int      @id @default(autoincrement())
  type        String   // LOGIN_SUCCESS, LOGIN_FAILED, TOKEN_REFRESH, LOGOUT, SUSPICIOUS_ACTIVITY
  userId      Int?
  ipAddress   String
  userAgent   String?
  details     String?  // JSONÂΩ¢Âºè„ÅÆË©≥Á¥∞ÊÉÖÂ†±
  timestamp   DateTime @default(now())

  users       users?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([type])
  @@index([userId])
  @@index([ipAddress])
  @@index([timestamp])
}

model login_attempts {
  id          Int      @id @default(autoincrement())
  identifier  String   // IP + username
  attempts    Int      @default(1)
  lockedUntil DateTime?
  lastAttempt DateTime @default(now())
  isLocked    Boolean  @default(false)

  @@index([identifier])
  @@index([lockedUntil])
  @@index([isLocked])
}

model security_settings {
  id                    Int      @id @default(autoincrement())
  companyId             Int
  maxLoginAttempts      Int      @default(5)
  lockoutDurationMinutes Int     @default(30)
  passwordMinLength     Int      @default(8)
  passwordRequireUpper  Boolean  @default(true)
  passwordRequireLower  Boolean  @default(true)
  passwordRequireNumber Boolean  @default(true)
  passwordRequireSymbol Boolean  @default(false)
  sessionTimeoutMinutes Int      @default(480) // 8ÊôÇÈñì
  enableTwoFactor       Boolean  @default(false)
  allowedIpRanges       String[] // CIDRÂΩ¢Âºè
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  companies             companies @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId])
  @@index([companyId])
}

// ============================================
// üîå EXTENSION MODELS (Êã°ÂºµÂèØËÉΩ)
// ============================================
// ‰ºÅÊ•≠„Åå„Ç´„Çπ„Çø„Éû„Ç§„Ç∫ÂèØËÉΩ„Å™„É¢„Éá„É´„ÄÇ
// „Ç´„É©„É†ËøΩÂä†„Éª„É™„É¨„Éº„Ç∑„Éß„É≥ËøΩÂä†„ÅØË®±ÂèØ„ÄÇ

// --- Extended User Profiles ---
// „É¶„Éº„Ç∂„Éº„Éó„É≠„Éï„Ç°„Ç§„É´Êã°ÂºµÁî®
// ‰æã: model ext_user_profiles {
//   id     Int  @id @default(autoincrement())
//   userId Int  @unique
//   users  users @relation(fields: [userId], references: [id])
//   // „Ç´„Çπ„Çø„É†„Éï„Ç£„Éº„É´„Éâ„ÇíËøΩÂä†ÂèØËÉΩ
// }

// ============================================
// üè¢ CUSTOM MODELS (‰ºÅÊ•≠Âõ∫Êúâ)
// ============================================
// ÂÆåÂÖ®„Å´‰ºÅÊ•≠Áã¨Ëá™„ÅÆ„É¢„Éá„É´„ÄÇËá™Áî±„Å´ËøΩÂä†„ÉªÂ§âÊõ¥ÂèØËÉΩ„ÄÇ

// --- Workflow Management ---
// „ÉØ„Éº„ÇØ„Éï„É≠„Éº„ÉªÊâøË™çÁî≥Ë´ã„Ç∑„Çπ„ÉÜ„É†

model workflow_types {
  id                   Int                    @id @default(autoincrement())
  companyId           Int
  code                String
  name                String
  description         String?
  category            String                 // EXPENSE, LEAVE, PURCHASE, GENERAL
  formSchema          Json                   // Áî≥Ë´ã„Éï„Ç©„Éº„É†ÂÆöÁæ©ÔºàJSONÔºâ
  validationRules     Json?                  // „Éê„É™„Éá„Éº„Ç∑„Éß„É≥„É´„Éº„É´ÔºàJSONÔºâ
  autoApproveRules    Json?                  // Ëá™ÂãïÊâøË™çÊù°‰ª∂ÔºàJSONÔºâ
  escalationRules     Json?                  // „Ç®„Çπ„Ç´„É¨„Éº„Ç∑„Éß„É≥„É´„Éº„É´ÔºàJSONÔºâ
  notificationSettings Json?                  // ÈÄöÁü•Ë®≠ÂÆöÔºàJSONÔºâ
  maxAmount           Decimal?               @db.Decimal(15,2)  // ÈáëÈ°ç‰∏äÈôê
  requireAttachment   Boolean                @default(false)
  allowBulk           Boolean                @default(false)
  isActive            Boolean                @default(true)
  displayOrder        Int                    @default(0)
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  createdBy           Int?
  updatedBy           Int?

  companies           companies              @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdUser         users?                 @relation("workflow_types_created", fields: [createdBy], references: [id])
  updatedUser         users?                 @relation("workflow_types_updated", fields: [updatedBy], references: [id])

  approval_routes     approval_routes[]
  workflow_requests   workflow_requests[]
  approval_delegates  approval_delegates[]
  auto_approval_rules auto_approval_rules[]

  @@unique([companyId, code])
  @@index([companyId])
  @@index([category])
  @@index([isActive])
}

model approval_routes {
  id                  Int                    @id @default(autoincrement())
  workflowTypeId      Int
  stepNumber          Int
  approverType        String                 // USER, DEPARTMENT, ROLE, DYNAMIC
  approverValue       Json                   // ÊâøË™çËÄÖÊåáÂÆöÔºàJSONÔºâ
  requiredCount       Int                    @default(1)
  isParallel          Boolean                @default(false)
  parallelType        String?                // AND, OR
  minimumApprovals    Int                    @default(1)
  isSequential        Boolean                @default(false) // Áõ¥ÂàóÊâøË™ç„Éï„É©„Ç∞
  sequentialOrder     Json?                  // Áõ¥ÂàóÊâøË™çÈ†ÜÂ∫èÔºàÊâøË™çËÄÖIDÈÖçÂàóÔºâ
  currentSequenceStep Int?                   // ÁèæÂú®„ÅÆÁõ¥Âàó„Çπ„ÉÜ„ÉÉ„ÉóÔºà0„Åã„ÇâÈñãÂßãÔºâ
  canSkip             Boolean                @default(false)
  autoApproveHours    Int?                   // Ëá™ÂãïÊâøË™ç„Åæ„Åß„ÅÆÊôÇÈñì
  autoApprovalRules   Json?                  // Ëá™ÂãïÊâøË™ç„É´„Éº„É´ÔºàJSONÔºâ
  condition           Json?                  // ÈÅ©Áî®Êù°‰ª∂ÔºàJSONÔºâ
  isActive            Boolean                @default(true)
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt

  workflow_types      workflow_types         @relation(fields: [workflowTypeId], references: [id], onDelete: Cascade)
  approval_history    approval_history[]

  @@unique([workflowTypeId, stepNumber])
  @@index([workflowTypeId])
  @@index([isActive])
}

model workflow_requests {
  id                  Int                    @id @default(autoincrement())
  workflowTypeId      Int
  requestNumber       String                 @unique
  companyId           Int
  requesterId         Int
  departmentId        Int
  title               String
  description         String?
  formData            Json                   // Áî≥Ë´ã„Éï„Ç©„Éº„É†„Éá„Éº„ÇøÔºàJSONÔºâ
  amount              Decimal?               @db.Decimal(15,2)
  status              String                 // DRAFT, PENDING, APPROVED, REJECTED, CANCELLED, RETURNED
  currentStep         Int                    @default(1)
  priority            String                 @default("NORMAL")  // LOW, NORMAL, HIGH, URGENT
  dueDate             DateTime?
  submittedAt         DateTime?
  completedAt         DateTime?
  isUrgent            Boolean                @default(false)
  returnReason        String?
  cancelReason        String?
  isEmergencyMode     Boolean                @default(false)
  emergencyReason     String?
  emergencyApprovedBy Int?
  emergencyApprovedAt DateTime?
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt

  workflow_types      workflow_types         @relation(fields: [workflowTypeId], references: [id])
  companies           companies              @relation(fields: [companyId], references: [id])
  requester           users                  @relation("workflow_requests_requester", fields: [requesterId], references: [id])
  departments         departments            @relation(fields: [departmentId], references: [id])
  emergencyApprover   users?                 @relation("workflow_requests_emergency_approver", fields: [emergencyApprovedBy], references: [id])

  approval_history    approval_history[]
  workflow_notifications workflow_notifications[]
  workflow_attachments workflow_attachments[]
  auto_approval_logs  auto_approval_logs[]

  @@index([workflowTypeId])
  @@index([companyId])
  @@index([requesterId])
  @@index([departmentId])
  @@index([status])
  @@index([currentStep])
  @@index([priority])
  @@index([submittedAt])
  @@index([dueDate])
  @@index([requestNumber])
}

model approval_history {
  id                  Int                    @id @default(autoincrement())
  requestId           Int
  stepNumber          Int
  routeId             Int?
  approverId          Int
  action              String                 // APPROVE, REJECT, RETURN, DELEGATE, SKIP, AUTO_APPROVE
  comment             String?
  attachments         Json?                  // Ê∑ª‰ªò„Éï„Ç°„Ç§„É´ÊÉÖÂ†±ÔºàJSONÔºâ
  delegatedFrom       Int?
  delegatedTo         Int?
  processedAt         DateTime               @default(now())
  processingTime      Int?                   // Âá¶ÁêÜÊôÇÈñìÔºàÂàÜÔºâ
  isNotified          Boolean                @default(false)
  isProxy             Boolean                @default(false)
  proxyReason         String?
  sequenceStep        Int?                   // Áõ¥ÂàóÊâøË™ç„Åß„ÅÆ„Çπ„ÉÜ„ÉÉ„ÉóÁï™Âè∑
  isSequential        Boolean                @default(false) // Áõ¥ÂàóÊâøË™ç„Åã„Å©„ÅÜ„Åã
  createdAt           DateTime               @default(now())

  workflow_requests   workflow_requests      @relation(fields: [requestId], references: [id], onDelete: Cascade)
  approval_routes     approval_routes?       @relation(fields: [routeId], references: [id])
  approver            users                  @relation("approval_history_approver", fields: [approverId], references: [id])
  delegatedFromUser   users?                 @relation("approval_history_delegated_from", fields: [delegatedFrom], references: [id])
  delegatedToUser     users?                 @relation("approval_history_delegated_to", fields: [delegatedTo], references: [id])

  @@index([requestId, stepNumber])
  @@index([approverId])
  @@index([action])
  @@index([processedAt])
}

model approval_delegates {
  id                  Int                    @id @default(autoincrement())
  delegatorId         Int
  delegateId          Int
  workflowTypeId      Int?                   // NULL=ÂÖ®„ÉØ„Éº„ÇØ„Éï„É≠„Éº„Çø„Ç§„Éó
  startDate           DateTime
  endDate             DateTime
  reason              String?
  isActive            Boolean                @default(true)
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  createdBy           Int?

  delegator           users                  @relation("approval_delegates_delegator", fields: [delegatorId], references: [id])
  delegate            users                  @relation("approval_delegates_delegate", fields: [delegateId], references: [id])
  workflow_types      workflow_types?        @relation(fields: [workflowTypeId], references: [id])
  createdUser         users?                 @relation("approval_delegates_created", fields: [createdBy], references: [id])

  @@unique([delegatorId, delegateId, workflowTypeId])
  @@index([delegatorId])
  @@index([delegateId])
  @@index([workflowTypeId])
  @@index([startDate, endDate])
  @@index([isActive])
}

model workflow_notifications {
  id                  Int                    @id @default(autoincrement())
  requestId           Int
  userId              Int
  type                String                 // REQUEST_SUBMITTED, APPROVAL_REQUIRED, APPROVED, REJECTED, RETURNED, COMPLETED
  title               String
  message             String
  priority            String                 @default("NORMAL")  // LOW, NORMAL, HIGH
  isRead              Boolean                @default(false)
  readAt              DateTime?
  emailSent           Boolean                @default(false)
  emailSentAt         DateTime?
  slackSent           Boolean                @default(false)
  slackSentAt         DateTime?
  actionUrl           String?
  metadata            Json?                  // ËøΩÂä†ÊÉÖÂ†±ÔºàJSONÔºâ
  createdAt           DateTime               @default(now())

  workflow_requests   workflow_requests      @relation(fields: [requestId], references: [id], onDelete: Cascade)
  user                users                  @relation("workflow_notifications_user", fields: [userId], references: [id])

  @@index([requestId])
  @@index([userId, isRead])
  @@index([type])
  @@index([createdAt])
}

model workflow_attachments {
  id                  Int                    @id @default(autoincrement())
  requestId           Int
  fileName            String
  fileSize            Int
  mimeType            String
  fileUrl             String
  thumbnailUrl        String?
  uploadedBy          Int
  uploadedAt          DateTime               @default(now())
  isDeleted           Boolean                @default(false)
  deletedAt           DateTime?
  deletedBy           Int?

  workflow_requests   workflow_requests      @relation(fields: [requestId], references: [id], onDelete: Cascade)
  uploader            users                  @relation("workflow_attachments_uploader", fields: [uploadedBy], references: [id])
  deleter             users?                 @relation("workflow_attachments_deleter", fields: [deletedBy], references: [id])

  @@index([requestId])
  @@index([uploadedBy])
  @@index([isDeleted])
}

model auto_approval_rules {
  id                  Int                    @id @default(autoincrement())
  workflowTypeId      Int
  stepNumber          Int?                   // null„ÅÆÂ†¥Âêà„ÅØÂÖ®„Çπ„ÉÜ„ÉÉ„ÉóÂØæË±°
  ruleType            String                 // TIME_BASED, AMOUNT_BASED, ROLE_BASED, CONDITION_BASED
  ruleName            String
  description         String?
  conditions          Json                   // Êù°‰ª∂Ë®≠ÂÆöÔºàJSONÔºâ
  autoApproveAfter    Int?                   // Ëá™ÂãïÊâøË™ç„Åæ„Åß„ÅÆÊôÇÈñìÔºàÂàÜÔºâ
  maxAmount           Decimal?               // ÈáëÈ°ç‰∏äÈôê
  applicableRoles     Json?                  // ÈÅ©Áî®ÂèØËÉΩ„Å™ÂΩπËÅ∑ÔºàÈÖçÂàóÔºâ
  priority            Int                    @default(0)
  isActive            Boolean                @default(true)
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  workflow_types      workflow_types         @relation(fields: [workflowTypeId], references: [id], onDelete: Cascade)
  auto_approval_logs  auto_approval_logs[]

  @@index([workflowTypeId])
  @@index([ruleType])
  @@index([isActive])
}

model auto_approval_logs {
  id                  Int                    @id @default(autoincrement())
  requestId           Int
  ruleId              Int
  ruleName            String
  ruleType            String
  triggeredAt         DateTime               @default(now())
  appliedAt           DateTime?              // ÂÆüÈöõ„Å´ÈÅ©Áî®„Åï„Çå„ÅüÊôÇÂàª
  status              String                 @default("PENDING") // PENDING, APPLIED, CANCELLED, FAILED
  reason              String?                // ÈÅ©Áî®„Éª„Ç≠„É£„É≥„Çª„É´ÁêÜÁî±
  systemUserId        Int?                   // „Ç∑„Çπ„ÉÜ„É†„É¶„Éº„Ç∂„ÉºID
  metadata            Json?                  // „É°„Çø„Éá„Éº„ÇøÔºàJSONÔºâ
  workflow_requests   workflow_requests      @relation(fields: [requestId], references: [id], onDelete: Cascade)
  auto_approval_rules auto_approval_rules    @relation(fields: [ruleId], references: [id], onDelete: Cascade)

  @@index([requestId])
  @@index([ruleId])
  @@index([status])
  @@index([triggeredAt])
}

// --- Enum Definitions ---
// EnumÂûãÂÆöÁæ©

enum LogLevel {
  TRACE
  DEBUG
  INFO
  WARN
  ERROR
  FATAL
}

enum MessageType {
  INFO
  SUCCESS
  WARNING
  ERROR
}

enum UserRole {
  ADMIN
  USER
  GUEST
  MANAGER
}
