version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: websys_postgres_dev
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-websys_db}
      TZ: Asia/Tokyo
    ports:
      - "5433:5432"
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - websys_network_dev
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: websys_backend_dev
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://${POSTGRES_USER:-admin}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-websys_db}
      JWT_SECRET: ${JWT_SECRET:-your-secret-key-change-this}
      PORT: 8000
    ports:
      - "8000:8000"
    volumes:
      # 開発ソースコードをマウント（workspace配下）
      - ../../../backend:/app
      # node_modulesは除外（コンテナ内で管理）
      - backend_node_modules_dev:/app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - websys_network_dev
    command: sh -c "npm install && npx prisma generate && npm run dev"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: websys_frontend_dev
    environment:
      NODE_ENV: development
      VITE_API_BASE_URL: ${VITE_API_BASE_URL:-http://localhost:8000}
    ports:
      - "3000:3000"
    volumes:
      # 開発ソースコードをマウント（workspace配下）
      - ../../../frontend:/app
      # node_modulesは除外（コンテナ内で管理）
      - frontend_node_modules_dev:/app/node_modules
    depends_on:
      - backend
    networks:
      - websys_network_dev
    command: sh -c "npm install && npm run dev"

volumes:
  postgres_data_dev:
  backend_node_modules_dev:
  frontend_node_modules_dev:

networks:
  websys_network_dev:
    driver: bridge