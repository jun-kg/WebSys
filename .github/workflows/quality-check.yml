name: Quality Check

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

jobs:
  prisma-check:
    name: Prismaモデル名チェック
    runs-on: ubuntu-latest

    steps:
      - name: チェックアウト
        uses: actions/checkout@v4

      - name: Prismaモデル名チェック実行
        run: |
          bash scripts/check-prisma-usage.sh
        continue-on-error: false

      - name: チェック結果レポート
        if: failure()
        run: |
          echo "::error::Prismaモデル名に誤りがあります。詳細は上記のログを確認してください。"

  environment-check:
    name: 環境設定チェック
    runs-on: ubuntu-latest

    steps:
      - name: チェックアウト
        uses: actions/checkout@v4

      - name: 環境設定チェック実行
        run: |
          bash scripts/check-environment.sh
        continue-on-error: true  # 環境依存のため警告のみ

      - name: チェック結果レポート
        if: failure()
        run: |
          echo "::warning::環境設定に問題がある可能性があります。詳細は上記のログを確認してください。"

  sync-check:
    name: templates/workspace 同期チェック
    runs-on: ubuntu-latest

    steps:
      - name: チェックアウト
        uses: actions/checkout@v4

      - name: 同期チェック実行
        run: |
          bash scripts/check-sync.sh
        continue-on-error: true  # 警告のみ許容

      - name: チェック結果レポート
        if: failure()
        run: |
          echo "::warning::templates/workspace の同期に問題がある可能性があります。"

  backend-tests:
    name: バックエンド単体試験
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: websys_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: チェックアウト
        uses: actions/checkout@v4

      - name: Node.js セットアップ
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: workspace/backend/package-lock.json

      - name: 依存関係インストール
        working-directory: workspace/backend
        run: npm ci

      - name: Prisma生成
        working-directory: workspace/backend
        run: npx prisma generate

      - name: データベースマイグレーション
        working-directory: workspace/backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/websys_test
        run: npx prisma migrate deploy

      - name: テスト実行
        working-directory: workspace/backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/websys_test
          JWT_ACCESS_SECRET: test-secret-key-for-ci
          JWT_REFRESH_SECRET: test-refresh-secret-key-for-ci
          NODE_ENV: test
        run: npm test

      - name: カバレッジレポート
        working-directory: workspace/backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/websys_test
          JWT_ACCESS_SECRET: test-secret-key-for-ci
          JWT_REFRESH_SECRET: test-refresh-secret-key-for-ci
          NODE_ENV: test
        run: npm run test:coverage

  frontend-tests:
    name: フロントエンド単体試験
    runs-on: ubuntu-latest

    steps:
      - name: チェックアウト
        uses: actions/checkout@v4

      - name: Node.js セットアップ
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: workspace/frontend/package-lock.json

      - name: 依存関係インストール
        working-directory: workspace/frontend
        run: npm ci

      - name: テスト実行
        working-directory: workspace/frontend
        run: npm test

      - name: カバレッジレポート
        working-directory: workspace/frontend
        run: npm run test:coverage

  build-check:
    name: ビルドチェック
    runs-on: ubuntu-latest
    needs: [prisma-check, backend-tests, frontend-tests]

    steps:
      - name: チェックアウト
        uses: actions/checkout@v4

      - name: Node.js セットアップ
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: バックエンドビルド
        working-directory: workspace/backend
        run: |
          npm ci
          npx prisma generate
          npm run build

      - name: フロントエンドビルド
        working-directory: workspace/frontend
        run: |
          npm ci
          npm run build

  quality-summary:
    name: 品質チェック総合結果
    runs-on: ubuntu-latest
    needs: [prisma-check, environment-check, sync-check, backend-tests, frontend-tests, build-check]
    if: always()

    steps:
      - name: 結果集計
        run: |
          echo "## 品質チェック結果サマリー" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### チェック項目" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Prismaモデル名チェック: ${{ needs.prisma-check.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- ⚠️  環境設定チェック: ${{ needs.environment-check.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- ⚠️  同期チェック: ${{ needs.sync-check.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ バックエンド試験: ${{ needs.backend-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ フロントエンド試験: ${{ needs.frontend-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ ビルドチェック: ${{ needs.build-check.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.prisma-check.result }}" == "failure" ] || \
             [ "${{ needs.backend-tests.result }}" == "failure" ] || \
             [ "${{ needs.frontend-tests.result }}" == "failure" ] || \
             [ "${{ needs.build-check.result }}" == "failure" ]; then
            echo "::error::品質チェックに失敗しました。詳細は各ジョブのログを確認してください。"
            exit 1
          fi

          echo "::notice::すべての品質チェックが正常に完了しました。"
